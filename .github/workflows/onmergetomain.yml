name: Code check
on:
  push:
    branches:
      - 'master'

jobs:
  release:
    name: Build package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.9.7

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.1.13
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache venv
        uses: actions/cache@v2
        with:
          path: |
            .venv
          key: ${{ runner.os }}-env-${{ hashFiles('**/poetry.lock') }}

      - name: Set up environment
        run: poetry install --no-root

      - name: Linting
        run: |
          source $PWD/.venv/bin/activate
          poe black-check
          poe pylint

      - name: Build package
        run: |
          poetry build -f wheel

      - name: Resolve wheel name
        run: |
          echo "WHEEL_NAME=$(ls -1 dist/ | grep -e "\.whl$" | sort -r | head -n 1)" >> $GITHUB_ENV

      - name: Create GitHub release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: 'v${{ steps.extract_version.outputs.replaced }}'
          name: 'Release ${{ steps.extract_version.outputs.replaced }}'
          generate_release_notes: true
          draft: false
          prerelease: ${{ steps.extract_prerelease.outputs.replaced != '' }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/${{ env.WHEEL_NAME }}
          asset_name: ${{ env.WHEEL_NAME }}
          asset_content_type: application/zip
